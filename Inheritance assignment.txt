Que1)Create a multi-level inheritance , instantiate the child class and observe
constructor invocation.Also show, if needed how will u invoke parent class 
constructor from child class ?

package Package;
class A
{
	int x;
	A()
	{
		System.out.println("inside base default");
	}
	A(int x)
	{
		super();
		System.out.println("inside base param");
		this.x = x;
	}
}
class B extends A
{
	B()
	{
		int y;
	//	super(2);
		System.out.println("inside sub(1) default");
	}
	B(int y,int z)
	{
		this.y = y;
		System.out.println("inside sub(1) 2 param");
	}
}
class C extends B
{
	C()
	{
		System.out.println("inside sub(2) default");
	}
}
public class sample1 
{
	public static void main(String[] args) 
	{
		//C ob1 = new C();
		B ob1 = new B();
		//A ob1 = new B();
	}

}
***********************************************************************************************************************************************************************
Que2)
/*create a class "Vehicle", define a method "public void start()" in it. 
 * From this class derive a class FourWheeler. How will u override "start()" method of parent class ?*/
package Package;
class vehicle
{
	public void start()
	{
		System.out.println("any vehicle you can started");
	}
}
class fourwheeler extends vehicle
{
	public void start()
	{
		System.out.println("fourwheeler started");
	}
}
public class sample2 
{	
	public static void main(String args[])
	{
		vehicle a1 = new vehicle();
		vehicle a2 = new fourwheeler();
		
		//a1.start();
		a2.start();
	}
}
***********************************************************************************************************************************************************************
Que3)
/* Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.*/
package Package;
class AB
{
	AB()
	{
		System.out.println("inside base default");
	}
	AB(int x)
	{
		System.out.println("inside base param");
	}
}
class BC extends AB
{
	BC()
	{
	//	new A();
		System.out.println("inside sub(1) default");
	}
	BC(int y,int z)
	{
		System.out.println("inside sub(1) 2 param");
	}
}
class CD extends AB
{
	CD()
	{
		System.out.println("inside sub(2) default");
	}
}

public class sample3 {

	public static void main(String args[])
	{
		CD a = new CD();
	}

}
***********************************************************************************************************************************************************************
Que4)
/*Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.
*/
package Package;
class Top1
{
	public void disp1()
	{
		System.out.println("Base Top1 disp");
	}
}
class Bottom1 extends Top1
{
	public void disp1()
	{
		System.out.println("Bottom1 class disp");
	}
}
class Bottom2 extends Top1
{
	public void disp1()
	{
		System.out.println("Bottom2 class disp");
	}
}
class Bottom3 extends Top1
{
	public void disp1()
	{
		System.out.println("Bottom3 class disp");
	}
}

public class sample4 
{

	public static void main(String[] args) 
	{
		// TODO Auto-generated method stub
		Top1 ref;
		ref = new Bottom1();
		ref.disp1();
		ref = new Bottom2();
		ref.disp1();
		ref = new Bottom3();
		ref.disp1();
	}

}
***********************************************************************************************************************************************************************
Que5)
/*5) create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle",
"Polygon" and "Circle". create an array of Shape having 3 elements.store child objects into this array . and call
their draw function.*/

package Package;
abstract class Shape
{  
	abstract void draw();  
}  
class Triangle extends Shape
{  
	void draw()
	{
		System.out.println("Draw Triangle");
	}  
}  
class Polygon extends Shape
{  
	void draw()
	{
		System.out.println("Draw Polygon");
	}  
}  
class Circle extends Shape
{  
	void draw()
	{
		System.out.println("Draw circle");
	}  
}  
 
class sample1
{  
	public static void main(String args[])
	{  	
		Shape arr[] = new Shape[3];
		arr[0]=new Triangle();
		arr[1]=new Polygon();
		arr[2]=new Circle();
		
		arr[0].draw();
		arr[1].draw();
		arr[2].draw();
		
	}  
}  
****************************************************************************************************************************************************************************
Que6)

/*Define interface "A" with "disp1()" method.Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".Instantiate class "C" and call its members as well as derived from parent interfaces.*/
package Package;
interface A
{
	abstract void disp1();
}
interface B extends A
{
	abstract void disp2();
}
class C implements B
{
	@Override
	public void disp1()
	{
		System.out.println("Display 1");
	}
	@Override
	public void disp2()
	{
		System.out.println("Display 2");
	}
}
public class sample5 
{
	public static void main(String[] args)
	{
		C s1 = new C();
		s1.disp1();
		s1.disp2();
		
	}
}
****************************************************************************************************************************************************************************
Que7)

/* Define class "Parent1" with some data.Define interface "Parent2" with some data.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.*/
package Package;
interface Parent1
{
	void show();
}
interface Parent2
{  
	void show(); 
}  
class Child implements Parent1,Parent2
{  
	public void print()
	{
		System.out.println("Display Parent1");
	}  
	public void show()
	{
		System.out.println("Display Parent2");
	}
	public static void main(String[] args)
	{
		Child ref = new Child();
		ref.print();
		ref.show();
	}
}

****************************************************************************************************************************************************************************
Que 8)

/* Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors.
*/
package Package;
class base1
{
	base1(int x)
	{
		System.out.println("1 Param of base1");
	}
}
class sub1
{
	sub1()
	{
		System.out.println("Default sub1");
	}
	sub1(int x)
	{
		System.out.println("1 Param of sub1");
	}
	sub1(int x, int y)
	{
		System.out.println("2 Param of sub1");
	}
	
}
public class Sample8
{
	public static void main(String[] args) 
	{
		sub1 ref1 = new sub1(5);
		sub1 ref2 = new sub1();
	}
}
************************************************************************************************************************************************************************
Que9)/*Create interface "Game" , have an abstract method "play()". from this interface implements classes like "Cricket", 
"FootBall" and "Tennis".Now Define one more class public class Demo with main function.In this class have a static
 method "perform" which will take interface reference as parameter.inside "perform()" see to it that any child 
 object passed ,its "play()" method should be invoked. Call "perform()" method from main function.*/


package Package;
interface Game
{
	abstract void play();
}

class Cricket implements Game
{
	@Override
	public void play() 
	{
		System.out.println("play cricket");
	}
}
class Football implements Game
{

	@Override
	public void play() 
	{
		System.out.println("play football");
	}
	
}
class Tennis implements Game
{
	@Override
	public void play() 
	{
		System.out.println("play tennis");
	}
}
public class Demo 
{
	static void perform(Game ref)
	{
		ref.play();
	}
	public static void main(String[] args) 
	{
		Demo obj = new Demo();
		obj.perform(new Tennis());
		obj.perform(new Football());
		obj.perform(new Cricket());	
	}

}
